From {{workload_name}} Require Import {{strategy_name}}.
From QuickChick Require Import QuickChick.
From PropLang Require Import PropLang.
Set Warnings "-extraction-opaque-accessed,-extraction".

Axiom num_tests : nat. 
Extract Constant num_tests => "max_int".

{% for test_name in test_names %}
{%- if type == "QuickChick" -%}
Definition qctest_{{test_name}} := (fun _ : unit => print_extracted_coq_string ("[|{" ++ show (withTime(fun tt => (quickCheckWith (updMaxDiscard (updMaxSuccess (updAnalysis stdArgs true) num_tests) num_tests) {{test_name}}))) ++ "}|]")).
{%- elif type == "QuickProp" -%}
Definition qctest_{{test_name}} := (fun _ : unit => print_extracted_coq_string ("[|{" ++ show (withTime(fun tt => (sample1 {{test_name}}))) ++ "}|]")).
{%- elif type == "FuzzChick" -%}
Definition qctest_{{test_name}} := (fun _ : unit => print_extracted_coq_string ("[|{" ++ show (withTime (fun tt => ({{test_name}}_fuzzer tt))) ++ "}|]")).
{%- endif %}
{% endfor %}
Parameter OCamlString : Type.
Extract Constant OCamlString => "string".

Axiom qctest_map : OCamlString -> unit.
Extract Constant qctest_map => "
fun test_name ->
  let test_map = [
    {% for test_name in test_names -%}
    (""{{test_name}}"", qctest_{{test_name}}){% if not loop.last %};
    {% endif %}
    {%- endfor %}
  ] in
  let test = List.assoc test_name test_map in
  test ()

{% if fuzzer %}
let () =
  Printf.printf ""Entering main of qc_exec\\n""; flush stdout;
  setup_shm_aux ();
  Sys.argv.(1) |> qctest_map ; flush stdout;
{%- else %}
let () =
Sys.argv.(1) |> qctest_map
{%- endif %}
".

{% if type == "QuickChick" %}
Extraction "{{strategy_name}}_test_runner.ml" sample1 runLoop {% for test_name in test_names -%} qctest_{{test_name}} {% endfor %} qctest_map.
{% elif type == "QuickProp" %}
Extraction "{{strategy_name}}_test_runner.ml" sample1 runLoop {% for test_name in test_names -%} qctest_{{test_name}} {% endfor %} qctest_map.
{% elif type == "FuzzChick" %}
Extraction "{{strategy_name}}_test_runner.ml" sample1 runLoop {% for test_name in test_names -%} qctest_{{test_name}} {% endfor %} qctest_map.
{% endif %}
